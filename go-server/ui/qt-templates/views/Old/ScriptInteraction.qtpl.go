// Code generated by qtc from "ScriptInteraction.qtpl". DO NOT EDIT.
// See https://github.com/valyala/quicktemplate for details.

//line views/Old/ScriptInteraction.qtpl:1
package Old

//line views/Old/ScriptInteraction.qtpl:1
import (
	qtio422016 "io"

	qt422016 "github.com/valyala/quicktemplate"
)

//line views/Old/ScriptInteraction.qtpl:1
var (
	_ = qtio422016.Copy
	_ = qt422016.AcquireByteBuffer
)

//line views/Old/ScriptInteraction.qtpl:1
func StreamScriptInteractionModal(qw422016 *qt422016.Writer) {
//line views/Old/ScriptInteraction.qtpl:1
	qw422016.N().S(`
        <!-- EditAsset template -->
        <!-- script type="text/html" id="script-interaction-modal" -->
		<!-- Modal -->
		<div class="modal fade" id="scriptModal" tabindex="-1" role="dialog" aria-labelledby="scriptLabel" aria-hidden="true">
		  <div class="modal-dialog" role="document">
		    <div class="modal-content">
		      <div class="modal-header">
		        <h5 class="modal-title" id="scriptModalTitle">Script Interaction</h5>
		        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
		          <span aria-hidden="true">&times;</span>
		        </button>
		      </div>
		      <div class="modal-body" id="scriptModalBody" >
		      </div>
		      <div class="modal-footer">
		        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
		        <!-- <button type="button" class="btn btn-primary">Save changes</button> -->
		      </div>
		    </div>
		  </div>
		</div>
    <!-- /script -->

`)
//line views/Old/ScriptInteraction.qtpl:25
}

//line views/Old/ScriptInteraction.qtpl:25
func WriteScriptInteractionModal(qq422016 qtio422016.Writer) {
//line views/Old/ScriptInteraction.qtpl:25
	qw422016 := qt422016.AcquireWriter(qq422016)
//line views/Old/ScriptInteraction.qtpl:25
	StreamScriptInteractionModal(qw422016)
//line views/Old/ScriptInteraction.qtpl:25
	qt422016.ReleaseWriter(qw422016)
//line views/Old/ScriptInteraction.qtpl:25
}

//line views/Old/ScriptInteraction.qtpl:25
func ScriptInteractionModal() string {
//line views/Old/ScriptInteraction.qtpl:25
	qb422016 := qt422016.AcquireByteBuffer()
//line views/Old/ScriptInteraction.qtpl:25
	WriteScriptInteractionModal(qb422016)
//line views/Old/ScriptInteraction.qtpl:25
	qs422016 := string(qb422016.B)
//line views/Old/ScriptInteraction.qtpl:25
	qt422016.ReleaseByteBuffer(qb422016)
//line views/Old/ScriptInteraction.qtpl:25
	return qs422016
//line views/Old/ScriptInteraction.qtpl:25
}

//line views/Old/ScriptInteraction.qtpl:27
func StreamJavascript_ScriptInteraction_ORIG(qw422016 *qt422016.Writer) {
//line views/Old/ScriptInteraction.qtpl:27
	qw422016.N().S(`

function NOTUSED_interactWithScript() {
    $('#scriptModal').modal('hide');
    return true
}


function refreshScriptStatus(script_name) {
    interact(script_name, ":status", "", function(script_name, r){
       if ( r.MessageType == "Status" ) {
           // TODO Handle status update
           console.log("Processing status update")
           console.log(r.Message)
           s = _scripts.get(r.ScriptName)
           if ( !s) {
              console.log("No script found with name: ", r.ScriptName)
              return
           }
           console.log("Script current status:", s.Status, s.Interaction) 
           s.Status.Status = r.Message.Status 
           s.Status.SubStatus = r.Message.SubStatus 
           s.Interaction.HaveLogs = r.Message.HaveLogs
           s.Interaction.RequestState = r.Message.RequestState

           refreshRow(script_name)
      } else {
           processError(script_name, r)
      }
    })
}

function resetScript(script_name) {
    interact(script_name, ":reset", "")
}

function forcestopScript(script_name) {
    interact(script_name, ":forcestop", "")
}

function stopScript(script_name) {
    interact(script_name, ":stop", "")
}

function showScriptUI(script_name) {
    interact(script_name, ":ui", "", function(script_name, r) {
       if (! (r.MessageType == "Widget" || r.MessageType == "VueWidget" ) ) {
          processError(script_name, r)
          return
       }
       if (r.MessageType == "Widget") {
           widget_info = r.Message
           template = widget_info.Template
           widget_template = $.templates(template).render(widget_info)

           _scripts.get(script_name).widget_template = widget_template
           _scripts.get(script_name).widget_info = widget_info

           setActiveScript(script_name, showWidget)

       } else if (r.MessageType == "VueWidget") {
           widget_info = r.Message
           _scripts.get(script_name).widget_template = `)
//line views/Old/ScriptInteraction.qtpl:27
	qw422016.N().S("`")
//line views/Old/ScriptInteraction.qtpl:27
	qw422016.N().S(`<div id="vue-anchor"><vue-widget></vue-widget></div>`)
//line views/Old/ScriptInteraction.qtpl:27
	qw422016.N().S("`")
//line views/Old/ScriptInteraction.qtpl:27
	qw422016.N().S(`  
           _scripts.get(script_name).widget_info = widget_info

           setActiveScript(script_name, showVueWidget)

           vue_templates = {}
           vue_templates["vue-widget.vue"] = widget_info.Template  
           new Vue({
             el: '#vue-anchor',
             components: { 
               'vue-widget': httpVueLoader("template://vue-widget.vue")
             },
           });
      }
   })
}

function logFromScript(script_name) {
    interact(script_name, ":logs", "", function(script_name, r){
       if (r.MessageType == "Logs") {
           _scripts.get(script_name).Logs = r.Message 
           setActiveScript(script_name, showLogs)
       }
    })
}

function clearlogsFromScript(script_name) {
    interact(script_name, ":clearlogs", "")
}

function startScript(script_name) {
    interact(script_name, ":start", "", function(){
        refreshScriptRow(script_name)
    })
}


function showVueWidget(script_name) {
     showWidget(script_name)
}

function showWidget(script_name) {

    template = _scripts.get(script_name).widget_template || "<div>No interaction template as yet.</div>"
    info = _scripts.get(script_name).widget_info || {}

    var el = document.createElement("span")
    el.innerHTML = template 
    $("scriptModalTitle").html = info.Title
    $("#scriptModalBody").append(el)

    $('#scriptModal').modal('show');
    $('#scriptModal').on( "dialogclose", function( event, ui ) { 
           $('#scriptModalBody').html("")
    });
}

function showLogs(script_name) {
    console.log("Showing logs...")
    logs = _scripts.get(script_name).Logs || "<div>No Logs as yet.</div>"

    var el = document.createElement("span")
    el.innerHTML = "<blockquote>" + logs + "</blockquote>" 

    $("scriptModalTitle").html = "Logs for: " + script_name 
    $("#scriptModalBody").append(el)

    $('#scriptModal').modal('show');
    $('#scriptModal').on( "dialogclose", function( event, ui ) { 
           $('#scriptModalBody').html("")
    });
}

function setActiveScript(script_name, afterFn) {

   if ( activeScript != "" ) {
       // Wait for close. 
       $('#scriptModalBody').html("")
       $('#scriptModal').modal('hide');
   }

   if (script_name == "") {
       alert("Empty script name in setActiveScript.")
       console.log("Script name is empty")
   }
   if ( ! _scripts.get(script_name) ) {
       alert("Script not found in the list: " + script_name)
       console.log("Script name is empty")
   }

   activeScript = script_name

   if ( afterFn ) {
       afterFn(script_name)
   } else {
   }
}

function processError(script_name, r) {
    if ( r.StatusCode != 0 ) {
          alert("Something went wrong. message=" + r.Message)

    } else if ( r.MessageType == "Response" && r.MessageSubType != "OK" ) {
          // Essentially an error.  
          systemAlert("Message:" + r.Message)
    }
}

function interact(script_name, command, content, nextFn) {

    var successFn = function(data) {
       var r = JSON.parse(data) // {ScriptName: ..., StatusCode: 0, MessageType: ..., Message: ""}

       if ( nextFn ) {
           nextFn(script_name, r)
           return
       }
       processError(script_name, r);
    }
    var errorFn = function(script_name, action, xhr, status, errMsg) {
       console.log("Server response Error: ", errMsg)
       systemAlert("Error in calling start:" + errMsg)
    }
    formData=new FormData()
    formData.append("ScriptName", script_name) 
    formData.append("Command", command) 
    formData.append("Content", content) 

    // Ajax Submit
    $.ajax({url: "/interact", type: "POST", cache: false, data: formData,
      processData: false, contentType: false, forceSync: false, cache: false,
      success: function(data) { 
          return successFn(data); 
      },
      error: function(xhr, status, errMsg) { 
          return errorFn(errMsg + ": " + xhr.ResponseText); 
      },
      complete: function() {
      },
    });

    return true
}


`)
//line views/Old/ScriptInteraction.qtpl:234
}

//line views/Old/ScriptInteraction.qtpl:234
func WriteJavascript_ScriptInteraction_ORIG(qq422016 qtio422016.Writer) {
//line views/Old/ScriptInteraction.qtpl:234
	qw422016 := qt422016.AcquireWriter(qq422016)
//line views/Old/ScriptInteraction.qtpl:234
	StreamJavascript_ScriptInteraction_ORIG(qw422016)
//line views/Old/ScriptInteraction.qtpl:234
	qt422016.ReleaseWriter(qw422016)
//line views/Old/ScriptInteraction.qtpl:234
}

//line views/Old/ScriptInteraction.qtpl:234
func Javascript_ScriptInteraction_ORIG() string {
//line views/Old/ScriptInteraction.qtpl:234
	qb422016 := qt422016.AcquireByteBuffer()
//line views/Old/ScriptInteraction.qtpl:234
	WriteJavascript_ScriptInteraction_ORIG(qb422016)
//line views/Old/ScriptInteraction.qtpl:234
	qs422016 := string(qb422016.B)
//line views/Old/ScriptInteraction.qtpl:234
	qt422016.ReleaseByteBuffer(qb422016)
//line views/Old/ScriptInteraction.qtpl:234
	return qs422016
//line views/Old/ScriptInteraction.qtpl:234
}
